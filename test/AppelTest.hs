{-
    Copyright (C) 2017, Garret Wassermann.

    This file is part of tigerc, the Tiger language compiler,
    based on the Tiger language in "Modern Compiler Implementation
    in ML" by Andrew W. Appel.

    tigerc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tigerc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with tigerc.  If not, see <http://www.gnu.org/licenses/>.
-}

module AppelTest where

import Test.Tasty (defaultMain, testGroup, TestTree)
import Test.Tasty.HUnit (assertEqual, testCase)

import Tiger.Lexical.Lexer (alexMonadScanTokens, alexMonadScanTokensWithPosn)
import Tiger.Lexical.Tokens (Token(..), L(..), AlexPosn(..))
import Tiger.Syntactic.Parser (happyTokenParse, happyTokenParseWithPosn)
import Tiger.Syntactic.AST (Program(..), Exp(..), Var(..), Decl(..), Type(..), Op(..), Symbol, Field(..), FunDecl(..))
                             
-- these tests are based on the ones written by Appel in sample ML code,
-- and distributed via the textbook website
appelTests = testGroup "Appel's original tests for Tiger" [testParseAppel1, testParseAppel2, testParseAppel3, testParseAppel4, testParseAppel5, testParseAppel6, testParseAppel7, testParseAppel8, testParseAppel9, testParseAppel10, testParseAppel11, testParseAppel12, testParseAppel13, testParseAppel14, testLexAppel15, testParseAppel15, testParseAppel16, testParseAppel17, testParseAppel18, testParseAppel19, testParseAppel20, testParseAppel21, testParseAppel22, testParseAppel23, testParseAppel24, testParseAppel25, testParseAppel26, testParseAppel27, testParseAppel28, testParseAppel29, testParseAppel30, testParseAppel31, testParseAppel32, testParseAppel33,testParseAppel34, testParseAppel35, testParseAppel36, testParseAppel37, testParseAppel38, testParseAppel39, testParseAppel40, testParseAppel41, testParseAppel42, testParseAppel43, testParseAppel44, testParseAppel45, testParseAppel46, testParseAppel47, testParseAppel48, testLexAppel49, testParseAppelMerge, testParseAppelQueens]

-- TODO: maybe use testCaseSteps in future when do typechecking?
-- (https://hackage.haskell.org/package/tasty-hunit-0.9.2/docs/Test-Tasty-HUnit.html)

testParseAppel1 =
    testCase "parses test1 (read from file)" $ (readFile "test/appeltestcases/test1.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "arrtype", ttyp = ArrayType "int" (AlexPosn {absolute = 64, row = 3, col = 17}), tposn = AlexPosn {absolute = 48, row = 3, col = 1}},VarDecl {vname = "arr1", vescape = True, vtyp = Just "arrtype", vinit = ArrayExp {atyp = "arrtype", size = IntExp 10, ainit = IntExp 0, aposn = AlexPosn {absolute = 98, row = 4, col = 21}}, vposn = AlexPosn {absolute = 78, row = 4, col = 1}}], lbody = VarExp (SimpleVar "arr1" (AlexPosn {absolute = 120, row = 6, col = 1})), lposn = AlexPosn {absolute = 43, row = 1, col = 43}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel2 =
    testCase "parses test2 (read from file)" $ (readFile "test/appeltestcases/test2.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "myint", ttyp = NameType "int" (AlexPosn {absolute = 73, row = 3, col = 14}), tposn = AlexPosn {absolute = 60, row = 3, col = 1}},TypeDecl {tname = "arrtype", ttyp = ArrayType "myint" (AlexPosn {absolute = 94, row = 4, col = 17}), tposn = AlexPosn {absolute = 78, row = 4, col = 1}},VarDecl {vname = "arr1", vescape = True, vtyp = Just "arrtype", vinit = ArrayExp {atyp = "arrtype", size = IntExp 10, ainit = IntExp 0, aposn = AlexPosn {absolute = 131, row = 6, col = 21}}, vposn = AlexPosn {absolute = 111, row = 6, col = 1}}], lbody = VarExp (SimpleVar "arr1" (AlexPosn {absolute = 153, row = 8, col = 1})), lposn = AlexPosn {absolute = 55, row = 1, col = 55}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel3 =
    testCase "parses test3 (read from file)" $ (readFile "test/appeltestcases/test3.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 65, row = 3, col = 18}},Field {fieldname = "age", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 78, row = 3, col = 31}}], tposn = AlexPosn {absolute = 48, row = 3, col = 1}},VarDecl {vname = "rec1", vescape = True, vtyp = Just "rectype", vinit = RecordExp {fields = [("age",IntExp 1000),("name",StrExp "Nobody" (AlexPosn {absolute = 129, row = 4, col = 42}))], rtyp = "rectype", rposn = AlexPosn {absolute = 108, row = 4, col = 21}}, vposn = AlexPosn {absolute = 88, row = 4, col = 1}}], lbody = SeqExp [AssignExp {avar = FieldVar (SimpleVar "rec1" (AlexPosn {absolute = 146, row = 6, col = 1})) "name" (AlexPosn {absolute = 150, row = 6, col = 5}), aexp = StrExp "Somebody" (AlexPosn {absolute = 168, row = 6, col = 23}), aPosn = AlexPosn {absolute = 156, row = 6, col = 11}},VarExp (SimpleVar "rec1" (AlexPosn {absolute = 172, row = 7, col = 1}))], lposn = AlexPosn {absolute = 43, row = 1, col = 43}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel4 =
    testCase "parses test4 (read from file)" $ (readFile "test/appeltestcases/test4.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "nfactor", params = [Field {fieldname = "n", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 76, row = 5, col = 17}}], result = (Just "int",AlexPosn {absolute = 83, row = 5, col = 24}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 97, row = 6, col = 6})), oper = Equal, right = IntExp 0, opposn = AlexPosn {absolute = 99, row = 6, col = 8}}, thenexp = IntExp 1, elseexp = Just (OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 122, row = 8, col = 8})), oper = Mul, right = CallExp {func = "nfactor", args = [OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 134, row = 8, col = 20})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 135, row = 8, col = 21}}], callposn = AlexPosn {absolute = 133, row = 8, col = 19}}, opposn = AlexPosn {absolute = 124, row = 8, col = 10}}), ifposn = AlexPosn {absolute = 93, row = 6, col = 2}}, funposn = AlexPosn {absolute = 59, row = 4, col = 19}}]], lbody = CallExp {func = "nfactor", args = [IntExp 10], callposn = AlexPosn {absolute = 151, row = 11, col = 8}}, lposn = AlexPosn {absolute = 35, row = 1, col = 35}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel5 =
    testCase "parses test5 (read from file)" $ (readFile "test/appeltestcases/test5.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "intlist", ttyp = RecordType [Field {fieldname = "hd", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 76, row = 4, col = 16}},Field {fieldname = "tl", escape = True, typ = "intlist", fieldposn = AlexPosn {absolute = 85, row = 4, col = 25}}], tposn = AlexPosn {absolute = 60, row = 3, col = 20}},TypeDecl {tname = "tree", ttyp = RecordType [Field {fieldname = "key", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 132, row = 7, col = 12}},Field {fieldname = "children", escape = True, typ = "treelist", fieldposn = AlexPosn {absolute = 142, row = 7, col = 22}}], tposn = AlexPosn {absolute = 120, row = 6, col = 20}},TypeDecl {tname = "treelist", ttyp = RecordType [Field {fieldname = "hd", escape = True, typ = "tree", fieldposn = AlexPosn {absolute = 179, row = 8, col = 17}},Field {fieldname = "tl", escape = True, typ = "treelist", fieldposn = AlexPosn {absolute = 189, row = 8, col = 27}}], tposn = AlexPosn {absolute = 162, row = 7, col = 42}},VarDecl {vname = "lis", vescape = True, vtyp = Just "intlist", vinit = RecordExp {fields = [("tl",NilExp),("hd",IntExp 0)], rtyp = "intlist", rposn = AlexPosn {absolute = 223, row = 10, col = 19}}, vposn = AlexPosn {absolute = 204, row = 9, col = 1}}], lbody = VarExp (SimpleVar "lis" (AlexPosn {absolute = 255, row = 13, col = 1})), lposn = AlexPosn {absolute = 36, row = 1, col = 36}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel6 =
    testCase "parses test6 (read from file)" $ (readFile "test/appeltestcases/test6.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "do_nothing1", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 76, row = 4, col = 21}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 84, row = 4, col = 29}}], result = (Nothing,AlexPosn {absolute = 94, row = 4, col = 39}), body = CallExp {func = "do_nothing2", args = [OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 110, row = 5, col = 14})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 111, row = 5, col = 15}}], callposn = AlexPosn {absolute = 109, row = 5, col = 13}}, funposn = AlexPosn {absolute = 55, row = 3, col = 1}},FunDecl {fundeclname = "do_nothing2", params = [Field {fieldname = "d", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 137, row = 7, col = 21}}], result = (Nothing,AlexPosn {absolute = 145, row = 7, col = 29}), body = CallExp {func = "do_nothing1", args = [VarExp (SimpleVar "d" (AlexPosn {absolute = 161, row = 8, col = 14})),StrExp "str" (AlexPosn {absolute = 168, row = 8, col = 21})], callposn = AlexPosn {absolute = 160, row = 8, col = 13}}, funposn = AlexPosn {absolute = 116, row = 6, col = 1}}]], lbody = CallExp {func = "do_nothing1", args = [IntExp 0,StrExp "str2" (AlexPosn {absolute = 196, row = 11, col = 21})], callposn = AlexPosn {absolute = 187, row = 11, col = 12}}, lposn = AlexPosn {absolute = 50, row = 1, col = 50}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel7 =
    testCase "parses test7 (read from file)" $ (readFile "test/appeltestcases/test7.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "do_nothing1", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 75, row = 4, col = 21}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 83, row = 4, col = 29}}], result = (Just "int",AlexPosn {absolute = 93, row = 4, col = 39}), body = SeqExp [CallExp {func = "do_nothing2", args = [OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 114, row = 5, col = 15})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 115, row = 5, col = 16}}], callposn = AlexPosn {absolute = 113, row = 5, col = 14}},IntExp 0], funposn = AlexPosn {absolute = 54, row = 3, col = 1}},FunDecl {fundeclname = "do_nothing2", params = [Field {fieldname = "d", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 144, row = 7, col = 21}}], result = (Just "string",AlexPosn {absolute = 151, row = 7, col = 28}), body = SeqExp [CallExp {func = "do_nothing1", args = [VarExp (SimpleVar "d" (AlexPosn {absolute = 176, row = 8, col = 15})),StrExp "str" (AlexPosn {absolute = 183, row = 8, col = 22})], callposn = AlexPosn {absolute = 175, row = 8, col = 14}},StrExp " " (AlexPosn {absolute = 188, row = 8, col = 27})], funposn = AlexPosn {absolute = 123, row = 6, col = 1}}]], lbody = CallExp {func = "do_nothing1", args = [IntExp 0,StrExp "str2" (AlexPosn {absolute = 216, row = 11, col = 21})], callposn = AlexPosn {absolute = 207, row = 11, col = 12}}, lposn = AlexPosn {absolute = 49, row = 1, col = 49}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel8 =
    testCase "parses test8 (read from file)" $ (readFile "test/appeltestcases/test8.tig" >>= (assertEqual [] (Program (IfExp {iftest = OpExp {left = IntExp 10, oper = GreaterThan, right = IntExp 20, opposn = AlexPosn {absolute = 25, row = 2, col = 7}}, thenexp = IntExp 30, elseexp = Just (IntExp 40), ifposn = AlexPosn {absolute = 18, row = 1, col = 18}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel9 =
    testCase "parses test9 (read from file)" $ (readFile "test/appeltestcases/test9.tig" >>= (assertEqual [] (Program (IfExp {iftest = OpExp {left = IntExp 5, oper = GreaterThan, right = IntExp 4, opposn = AlexPosn {absolute = 49, row = 3, col = 5}}, thenexp = IntExp 13, elseexp = Just (StrExp " " (AlexPosn {absolute = 69, row = 3, col = 25})), ifposn = AlexPosn {absolute = 44, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel10 =
    testCase "parses test10 (read from file)" $ (readFile "test/appeltestcases/test10.tig" >>= (assertEqual [] (Program (WhileExp {wtest = OpExp {left = IntExp 10, oper = GreaterThan, right = IntExp 5, opposn = AlexPosn {absolute = 47, row = 2, col = 9}}, wbody = OpExp {left = IntExp 5, oper = Add, right = IntExp 6, opposn = AlexPosn {absolute = 56, row = 2, col = 18}}, wPosn = AlexPosn {absolute = 38, row = 1, col = 38}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel11 =
    testCase "parses test11 (read from file)" $ (readFile "test/appeltestcases/test11.tig" >>= (assertEqual [] (Program (ForExp {fvar = "i", fescape = True, lo = IntExp 10, hi = StrExp " " (AlexPosn {absolute = 93, row = 2, col = 15}), fbody = AssignExp {avar = SimpleVar "i" (AlexPosn {absolute = 100, row = 3, col = 1}), aexp = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 105, row = 3, col = 6})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 107, row = 3, col = 8}}, aPosn = AlexPosn {absolute = 102, row = 3, col = 3}}, fposn = AlexPosn {absolute = 78, row = 1, col = 78}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel12 =
    testCase "parses test12 (read from file)" $ (readFile "test/appeltestcases/test12.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 31, row = 4, col = 1}}], lbody = ForExp {fvar = "i", fescape = True, lo = IntExp 0, hi = IntExp 100, fbody = SeqExp [AssignExp {avar = SimpleVar "a" (AlexPosn {absolute = 66, row = 6, col = 21}), aexp = OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 69, row = 6, col = 24})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 70, row = 6, col = 25}}, aPosn = AlexPosn {absolute = 67, row = 6, col = 22}},SeqExp []], fposn = AlexPosn {absolute = 46, row = 6, col = 1}}, lposn = AlexPosn {absolute = 26, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel13 =
    testCase "parses test13 (read from file)" $ (readFile "test/appeltestcases/test13.tig" >>= (assertEqual [] (Program (OpExp {left = IntExp 3, oper = GreaterThan, right = StrExp "df" (AlexPosn {absolute = 55, row = 3, col = 7}), opposn = AlexPosn {absolute = 50, row = 3, col = 2}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel14 =
    testCase "parses test14 (read from file)" $ (readFile "test/appeltestcases/test14.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "arrtype", ttyp = ArrayType "int" (AlexPosn {absolute = 60, row = 5, col = 16}), tposn = AlexPosn {absolute = 45, row = 5, col = 1}},TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 90, row = 6, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 103, row = 6, col = 30}}], tposn = AlexPosn {absolute = 74, row = 6, col = 1}},VarDecl {vname = "rec", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("id",IntExp 0),("name",StrExp "aname" (AlexPosn {absolute = 145, row = 8, col = 32}))], rtyp = "rectype", rposn = AlexPosn {absolute = 125, row = 8, col = 12}}, vposn = AlexPosn {absolute = 114, row = 8, col = 1}},VarDecl {vname = "arr", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "arrtype", size = IntExp 3, ainit = IntExp 0, aposn = AlexPosn {absolute = 166, row = 9, col = 12}}, vposn = AlexPosn {absolute = 155, row = 9, col = 1}}], lbody = IfExp {iftest = OpExp {left = VarExp (SimpleVar "rec" (AlexPosn {absolute = 191, row = 12, col = 4})), oper = NotEqual, right = VarExp (SimpleVar "arr" (AlexPosn {absolute = 198, row = 12, col = 11})), opposn = AlexPosn {absolute = 195, row = 12, col = 8}}, thenexp = IntExp 3, elseexp = Just (IntExp 4), ifposn = AlexPosn {absolute = 188, row = 12, col = 1}}, lposn = AlexPosn {absolute = 39, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testLexAppel15 =
    testCase "lexes test15 (read from file)" $ (readFile "test/appeltestcases/test15.tig" >>= (assertEqual [] ([IF, NUM 20, THEN, NUM 3, TEOF])) . alexMonadScanTokens)
testParseAppel15 =
    testCase "parses test15 (read from file)" $ (readFile "test/appeltestcases/test15.tig" >>= (assertEqual [] (Program (IfExp {iftest = IntExp 20, thenexp = IntExp 3, elseexp = Nothing, ifposn = AlexPosn {absolute = 41, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel16 =
    testCase "parses test16 (read from file)" $ (readFile "test/appeltestcases/test16.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "a", ttyp = NameType "c" (AlexPosn {absolute = 93, row = 4, col = 7}), tposn = AlexPosn {absolute = 86, row = 3, col = 1}},TypeDecl {tname = "b", ttyp = NameType "a" (AlexPosn {absolute = 102, row = 5, col = 7}), tposn = AlexPosn {absolute = 95, row = 4, col = 9}},TypeDecl {tname = "c", ttyp = NameType "d" (AlexPosn {absolute = 111, row = 6, col = 7}), tposn = AlexPosn {absolute = 104, row = 5, col = 9}},TypeDecl {tname = "d", ttyp = NameType "a" (AlexPosn {absolute = 120, row = 7, col = 7}), tposn = AlexPosn {absolute = 113, row = 6, col = 9}}], lbody = StrExp "" (AlexPosn {absolute = 128, row = 10, col = 2}), lposn = AlexPosn {absolute = 80, row = 1, col = 80}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel17 =
    testCase "parses test17 (read from file)" $ (readFile "test/appeltestcases/test17.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "tree", ttyp = RecordType [Field {fieldname = "key", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 95, row = 4, col = 12}},Field {fieldname = "children", escape = True, typ = "treelist", fieldposn = AlexPosn {absolute = 105, row = 4, col = 22}}], tposn = AlexPosn {absolute = 83, row = 3, col = 20}},VarDecl {vname = "d", vescape = True, vtyp = Just "int", vinit = IntExp 0, vposn = AlexPosn {absolute = 125, row = 4, col = 42}},TypeDecl {tname = "treelist", ttyp = RecordType [Field {fieldname = "hd", escape = True, typ = "tree", fieldposn = AlexPosn {absolute = 156, row = 6, col = 17}},Field {fieldname = "tl", escape = True, typ = "treelist", fieldposn = AlexPosn {absolute = 166, row = 6, col = 27}}], tposn = AlexPosn {absolute = 139, row = 5, col = 14}}], lbody = VarExp (SimpleVar "d" (AlexPosn {absolute = 185, row = 9, col = 1})), lposn = AlexPosn {absolute = 59, row = 1, col = 59}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel18 =
    testCase "parses test18 (read from file)" $ (readFile "test/appeltestcases/test18.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "do_nothing1", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 90, row = 4, col = 21}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 98, row = 4, col = 29}}], result = (Just "int",AlexPosn {absolute = 108, row = 4, col = 39}), body = SeqExp [CallExp {func = "do_nothing2", args = [OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 129, row = 5, col = 15})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 130, row = 5, col = 16}}], callposn = AlexPosn {absolute = 128, row = 5, col = 14}},IntExp 0], funposn = AlexPosn {absolute = 69, row = 3, col = 1}}],VarDecl {vname = "d", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 138, row = 6, col = 1}},FunDecls [FunDecl {fundeclname = "do_nothing2", params = [Field {fieldname = "d", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 169, row = 9, col = 21}}], result = (Just "string",AlexPosn {absolute = 176, row = 9, col = 28}), body = SeqExp [CallExp {func = "do_nothing1", args = [VarExp (SimpleVar "d" (AlexPosn {absolute = 201, row = 10, col = 15})),StrExp "str" (AlexPosn {absolute = 208, row = 10, col = 22})], callposn = AlexPosn {absolute = 200, row = 10, col = 14}},StrExp " " (AlexPosn {absolute = 213, row = 10, col = 27})], funposn = AlexPosn {absolute = 148, row = 8, col = 1}}]], lbody = CallExp {func = "do_nothing1", args = [IntExp 0,StrExp "str2" (AlexPosn {absolute = 241, row = 13, col = 21})], callposn = AlexPosn {absolute = 232, row = 13, col = 12}}, lposn = AlexPosn {absolute = 64, row = 1, col = 64}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel19 =
    testCase "parses test19 (read from file)" $ (readFile "test/appeltestcases/test19.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "do_nothing1", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 116, row = 4, col = 21}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 124, row = 4, col = 29}}], result = (Just "int",AlexPosn {absolute = 134, row = 4, col = 39}), body = SeqExp [CallExp {func = "do_nothing2", args = [OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 155, row = 5, col = 15})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 156, row = 5, col = 16}}], callposn = AlexPosn {absolute = 154, row = 5, col = 14}},IntExp 0], funposn = AlexPosn {absolute = 95, row = 3, col = 1}},FunDecl {fundeclname = "do_nothing2", params = [Field {fieldname = "d", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 185, row = 7, col = 21}}], result = (Just "string",AlexPosn {absolute = 192, row = 7, col = 28}), body = SeqExp [CallExp {func = "do_nothing1", args = [VarExp (SimpleVar "a" (AlexPosn {absolute = 217, row = 8, col = 15})),StrExp "str" (AlexPosn {absolute = 224, row = 8, col = 22})], callposn = AlexPosn {absolute = 216, row = 8, col = 14}},StrExp " " (AlexPosn {absolute = 229, row = 8, col = 27})], funposn = AlexPosn {absolute = 164, row = 6, col = 1}}]], lbody = CallExp {func = "do_nothing1", args = [IntExp 0,StrExp "str2" (AlexPosn {absolute = 257, row = 11, col = 21})], callposn = AlexPosn {absolute = 248, row = 11, col = 12}}, lposn = AlexPosn {absolute = 90, row = 1, col = 90}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel20 =
    testCase "parses test20 (read from file)" $ (readFile "test/appeltestcases/test20.tig" >>= (assertEqual [] (Program (WhileExp {wtest = OpExp {left = IntExp 10, oper = GreaterThan, right = IntExp 5, opposn = AlexPosn {absolute = 46, row = 3, col = 9}}, wbody = SeqExp [OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 54, row = 3, col = 17})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 55, row = 3, col = 18}},SeqExp []], wPosn = AlexPosn {absolute = 37, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel21 =
    testCase "parses test21 (read from file)" $ (readFile "test/appeltestcases/test21.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "nfactor", params = [Field {fieldname = "n", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 113, row = 5, col = 17}}], result = (Nothing,AlexPosn {absolute = 121, row = 5, col = 25}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 129, row = 6, col = 6})), oper = Equal, right = IntExp 0, opposn = AlexPosn {absolute = 131, row = 6, col = 8}}, thenexp = IntExp 1, elseexp = Just (OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 154, row = 8, col = 8})), oper = Mul, right = CallExp {func = "nfactor", args = [OpExp {left = VarExp (SimpleVar "n" (AlexPosn {absolute = 166, row = 8, col = 20})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 167, row = 8, col = 21}}], callposn = AlexPosn {absolute = 165, row = 8, col = 19}}, opposn = AlexPosn {absolute = 156, row = 8, col = 10}}), ifposn = AlexPosn {absolute = 125, row = 6, col = 2}}, funposn = AlexPosn {absolute = 96, row = 4, col = 19}}]], lbody = CallExp {func = "nfactor", args = [IntExp 10], callposn = AlexPosn {absolute = 183, row = 11, col = 8}}, lposn = AlexPosn {absolute = 72, row = 1, col = 72}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel22 =
    testCase "parses test22 (read from file)" $ (readFile "test/appeltestcases/test22.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 63, row = 4, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 77, row = 4, col = 31}}], tposn = AlexPosn {absolute = 47, row = 4, col = 1}},VarDecl {vname = "rec1", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("id",IntExp 0),("name",StrExp "Name" (AlexPosn {absolute = 117, row = 5, col = 32}))], rtyp = "rectype", rposn = AlexPosn {absolute = 98, row = 5, col = 13}}, vposn = AlexPosn {absolute = 86, row = 5, col = 1}}], lbody = AssignExp {avar = FieldVar (SimpleVar "rec1" (AlexPosn {absolute = 130, row = 7, col = 1})) "nam" (AlexPosn {absolute = 134, row = 7, col = 5}), aexp = StrExp "asd" (AlexPosn {absolute = 146, row = 7, col = 17}), aPosn = AlexPosn {absolute = 139, row = 7, col = 10}}, lposn = AlexPosn {absolute = 41, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel23 =
    testCase "parses test23 (read from file)" $ (readFile "test/appeltestcases/test23.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 52, row = 4, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 66, row = 4, col = 31}}], tposn = AlexPosn {absolute = 36, row = 4, col = 1}},VarDecl {vname = "rec1", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("id",IntExp 0),("name",StrExp "aname" (AlexPosn {absolute = 107, row = 5, col = 33}))], rtyp = "rectype", rposn = AlexPosn {absolute = 87, row = 5, col = 13}}, vposn = AlexPosn {absolute = 75, row = 5, col = 1}}], lbody = SeqExp [AssignExp {avar = FieldVar (SimpleVar "rec1" (AlexPosn {absolute = 120, row = 7, col = 1})) "name" (AlexPosn {absolute = 124, row = 7, col = 5}), aexp = IntExp 3, aPosn = AlexPosn {absolute = 130, row = 7, col = 11}},AssignExp {avar = FieldVar (SimpleVar "rec1" (AlexPosn {absolute = 137, row = 8, col = 1})) "id" (AlexPosn {absolute = 141, row = 8, col = 5}), aexp = StrExp "" (AlexPosn {absolute = 149, row = 8, col = 13}), aPosn = AlexPosn {absolute = 145, row = 8, col = 9}}], lposn = AlexPosn {absolute = 30, row = 2, col = 1}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel24 =
    testCase "parses test24 (read from file)" $ (readFile "test/appeltestcases/test24.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "d", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 40, row = 3, col = 1}}], lbody = VarExp (SubscriptVar (SimpleVar "d" (AlexPosn {absolute = 53, row = 5, col = 1})) (IntExp 3) (AlexPosn {absolute = 54, row = 5, col = 2})), lposn = AlexPosn {absolute = 34, row = 1, col = 34}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel25 =
    testCase "parses test25 (read from file)" $ (readFile "test/appeltestcases/test25.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "d", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 41, row = 3, col = 1}}], lbody = VarExp (FieldVar (SimpleVar "d" (AlexPosn {absolute = 54, row = 5, col = 1})) "f" (AlexPosn {absolute = 55, row = 5, col = 2})), lposn = AlexPosn {absolute = 35, row = 1, col = 35}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel26 =
    testCase "parses test26 (read from file)" $ (readFile "test/appeltestcases/test26.tig" >>= (assertEqual [] (Program (OpExp {left = IntExp 3, oper = Add, right = StrExp "var" (AlexPosn {absolute = 41, row = 3, col = 8}), opposn = AlexPosn {absolute = 35, row = 3, col = 2}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel27 =
    testCase "parses test27 (read from file)" $ (readFile "test/appeltestcases/test27.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 32, row = 3, col = 1}},FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 54, row = 5, col = 12}}], result = (Just "int",AlexPosn {absolute = 60, row = 5, col = 18}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 67, row = 5, col = 25})), funposn = AlexPosn {absolute = 43, row = 5, col = 1}}]], lbody = CallExp {func = "g", args = [IntExp 2], callposn = AlexPosn {absolute = 75, row = 7, col = 2}}, lposn = AlexPosn {absolute = 27, row = 1, col = 27}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel28 =
    testCase "parses test28 (read from file)" $ (readFile "test/appeltestcases/test28.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype1", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 61, row = 4, col = 18}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 75, row = 4, col = 32}}], tposn = AlexPosn {absolute = 44, row = 4, col = 1}},TypeDecl {tname = "rectype2", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 101, row = 5, col = 18}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 115, row = 5, col = 32}}], tposn = AlexPosn {absolute = 84, row = 5, col = 1}},VarDecl {vname = "rec1", vescape = True, vtyp = Just "rectype1", vinit = RecordExp {fields = [("id",IntExp 0),("name",StrExp "Name" (AlexPosn {absolute = 167, row = 7, col = 43}))], rtyp = "rectype2", rposn = AlexPosn {absolute = 147, row = 7, col = 23}}, vposn = AlexPosn {absolute = 125, row = 7, col = 1}}], lbody = VarExp (SimpleVar "rec1" (AlexPosn {absolute = 180, row = 9, col = 1})), lposn = AlexPosn {absolute = 39, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel29 =
    testCase "parses test29 (read from file)" $ (readFile "test/appeltestcases/test29.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "arrtype1", ttyp = ArrayType "int" (AlexPosn {absolute = 59, row = 4, col = 17}), tposn = AlexPosn {absolute = 43, row = 4, col = 1}},TypeDecl {tname = "arrtype2", ttyp = ArrayType "int" (AlexPosn {absolute = 89, row = 5, col = 17}), tposn = AlexPosn {absolute = 73, row = 5, col = 1}},VarDecl {vname = "arr1", vescape = True, vtyp = Just "arrtype1", vinit = ArrayExp {atyp = "arrtype2", size = IntExp 10, ainit = IntExp 0, aposn = AlexPosn {absolute = 126, row = 7, col = 23}}, vposn = AlexPosn {absolute = 104, row = 7, col = 1}}], lbody = VarExp (SimpleVar "arr1" (AlexPosn {absolute = 149, row = 9, col = 1})), lposn = AlexPosn {absolute = 38, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel30 =
    testCase "parses test30 (read from file)" $ (readFile "test/appeltestcases/test30.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "a", ttyp = ArrayType "int" (AlexPosn {absolute = 42, row = 4, col = 11}), tposn = AlexPosn {absolute = 33, row = 4, col = 2}},TypeDecl {tname = "b", ttyp = NameType "a" (AlexPosn {absolute = 66, row = 5, col = 11}), tposn = AlexPosn {absolute = 57, row = 5, col = 2}},VarDecl {vname = "arr1", vescape = True, vtyp = Just "a", vinit = ArrayExp {atyp = "b", size = IntExp 10, ainit = IntExp 0, aposn = AlexPosn {absolute = 85, row = 7, col = 16}}, vposn = AlexPosn {absolute = 71, row = 7, col = 2}}], lbody = VarExp (SubscriptVar (SimpleVar "arr1" (AlexPosn {absolute = 102, row = 9, col = 2})) (IntExp 2) (AlexPosn {absolute = 106, row = 9, col = 6})), lposn = AlexPosn {absolute = 26, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel31 =
    testCase "parses test31 (read from file)" $ (readFile "test/appeltestcases/test31.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Just "int", vinit = StrExp " " (AlexPosn {absolute = 74, row = 3, col = 16}), vposn = AlexPosn {absolute = 59, row = 3, col = 1}}], lbody = VarExp (SimpleVar "a" (AlexPosn {absolute = 80, row = 5, col = 1})), lposn = AlexPosn {absolute = 53, row = 1, col = 53}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel32 =
    testCase "parses test32 (read from file)" $ (readFile "test/appeltestcases/test32.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "arrayty", ttyp = ArrayType "int" (AlexPosn {absolute = 75, row = 4, col = 16}), tposn = AlexPosn {absolute = 60, row = 4, col = 1}},VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "arrayty", size = IntExp 10, ainit = StrExp " " (AlexPosn {absolute = 117, row = 6, col = 28}), aposn = AlexPosn {absolute = 99, row = 6, col = 10}}, vposn = AlexPosn {absolute = 90, row = 6, col = 1}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 55, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel33 =
    testCase "parses test33 (read from file)" $ (readFile "test/appeltestcases/test33.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [], rtyp = "rectype", rposn = AlexPosn {absolute = 41, row = 3, col = 9}}, vposn = AlexPosn {absolute = 33, row = 3, col = 1}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 28, row = 1, col = 28}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel34 =
    testCase "parses test34 (read from file)" $ (readFile "test/appeltestcases/test34.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 73, row = 3, col = 13}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 81, row = 3, col = 21}}], result = (Just "int",AlexPosn {absolute = 90, row = 3, col = 30}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 97, row = 3, col = 37})), funposn = AlexPosn {absolute = 61, row = 3, col = 1}}]], lbody = CallExp {func = "g", args = [StrExp "one" (AlexPosn {absolute = 109, row = 5, col = 7}),StrExp "two" (AlexPosn {absolute = 116, row = 5, col = 14})], callposn = AlexPosn {absolute = 104, row = 5, col = 2}}, lposn = AlexPosn {absolute = 56, row = 1, col = 56}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel35 =
    testCase "parses test35 (read from file)" $ (readFile "test/appeltestcases/test35.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 62, row = 3, col = 13}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 70, row = 3, col = 21}}], result = (Just "int",AlexPosn {absolute = 79, row = 3, col = 30}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 86, row = 3, col = 37})), funposn = AlexPosn {absolute = 50, row = 3, col = 1}}]], lbody = CallExp {func = "g", args = [StrExp "one" (AlexPosn {absolute = 98, row = 5, col = 7})], callposn = AlexPosn {absolute = 93, row = 5, col = 2}}, lposn = AlexPosn {absolute = 45, row = 1, col = 45}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel36 =
    testCase "parses test36 (read from file)" $ (readFile "test/appeltestcases/test36.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 63, row = 3, col = 13}},Field {fieldname = "b", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 71, row = 3, col = 21}}], result = (Just "int",AlexPosn {absolute = 80, row = 3, col = 30}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 87, row = 3, col = 37})), funposn = AlexPosn {absolute = 51, row = 3, col = 1}}]], lbody = CallExp {func = "g", args = [IntExp 3,StrExp "one" (AlexPosn {absolute = 101, row = 5, col = 9}),IntExp 5], callposn = AlexPosn {absolute = 94, row = 5, col = 2}}, lposn = AlexPosn {absolute = 46, row = 1, col = 46}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel37 =
    testCase "parses test37 (read from file)" $ (readFile "test/appeltestcases/test37.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 145, row = 4, col = 1}},VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = StrExp " " (AlexPosn {absolute = 168, row = 5, col = 12}), vposn = AlexPosn {absolute = 157, row = 5, col = 1}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 140, row = 2, col = 70}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel38 =
    testCase "parses test38 (read from file)" $ (readFile "test/appeltestcases/test38.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "a", ttyp = NameType "int" (AlexPosn {absolute = 170, row = 5, col = 10}), tposn = AlexPosn {absolute = 161, row = 5, col = 1}},TypeDecl {tname = "a", ttyp = NameType "string" (AlexPosn {absolute = 184, row = 6, col = 10}), tposn = AlexPosn {absolute = 175, row = 6, col = 1}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 156, row = 3, col = 24}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel39 =
    testCase "parses test39 (read from file)" $ (readFile "test/appeltestcases/test39.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 177, row = 5, col = 12}}], result = (Just "int",AlexPosn {absolute = 183, row = 5, col = 18}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 190, row = 5, col = 25})), funposn = AlexPosn {absolute = 166, row = 5, col = 1}},FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 204, row = 6, col = 12}}], result = (Just "int",AlexPosn {absolute = 210, row = 6, col = 18}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 217, row = 6, col = 25})), funposn = AlexPosn {absolute = 193, row = 6, col = 1}}]], lbody = IntExp 0, lposn = AlexPosn {absolute = 161, row = 3, col = 22}}) )) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel40 =
    testCase "parses test40 (read from file)" $ (readFile "test/appeltestcases/test40.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 55, row = 3, col = 12}}], result = (Nothing,AlexPosn {absolute = 62, row = 3, col = 19}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 64, row = 3, col = 21})), funposn = AlexPosn {absolute = 44, row = 3, col = 1}}]], lbody = CallExp {func = "g", args = [IntExp 2], callposn = AlexPosn {absolute = 72, row = 5, col = 2}}, lposn = AlexPosn {absolute = 39, row = 1, col = 39}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel41 =
    testCase "parses test41 (read from file)" $ (readFile "test/appeltestcases/test41.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "a", ttyp = NameType "int" (AlexPosn {absolute = 45, row = 3, col = 10}), tposn = AlexPosn {absolute = 36, row = 3, col = 1}}], lbody = LetExp {decls = [TypeDecl {tname = "a", ttyp = NameType "string" (AlexPosn {absolute = 68, row = 6, col = 11}), tposn = AlexPosn {absolute = 59, row = 6, col = 2}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 53, row = 5, col = 1}}, lposn = AlexPosn {absolute = 31, row = 1, col = 31}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel42 =
    testCase "parses test42 (read from file)" $ (readFile "test/appeltestcases/test42.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "arrtype1", ttyp = ArrayType "int" (AlexPosn {absolute = 50, row = 4, col = 16}), tposn = AlexPosn {absolute = 34, row = 3, col = 1}},TypeDecl {tname = "rectype1", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 80, row = 5, col = 17}},Field {fieldname = "address", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 93, row = 5, col = 30}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 109, row = 5, col = 46}},Field {fieldname = "age", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 119, row = 5, col = 56}}], tposn = AlexPosn {absolute = 63, row = 4, col = 29}},TypeDecl {tname = "arrtype2", ttyp = ArrayType "rectype1" (AlexPosn {absolute = 145, row = 6, col = 16}), tposn = AlexPosn {absolute = 129, row = 5, col = 66}},TypeDecl {tname = "rectype2", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 180, row = 7, col = 17}},Field {fieldname = "dates", escape = True, typ = "arrtype1", fieldposn = AlexPosn {absolute = 195, row = 7, col = 32}}], tposn = AlexPosn {absolute = 163, row = 6, col = 34}},TypeDecl {tname = "arrtype3", ttyp = ArrayType "string" (AlexPosn {absolute = 229, row = 9, col = 16}), tposn = AlexPosn {absolute = 213, row = 8, col = 1}},VarDecl {vname = "arr1", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "arrtype1", size = IntExp 10, ainit = IntExp 0, aposn = AlexPosn {absolute = 258, row = 11, col = 12}}, vposn = AlexPosn {absolute = 246, row = 10, col = 1}},VarDecl {vname = "arr2", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "arrtype2", size = IntExp 5, ainit = RecordExp {fields = [("age",IntExp 0),("id",IntExp 0),("address",StrExp "somewhere" (AlexPosn {absolute = 348, row = 12, col = 71})),("name",StrExp "aname" (AlexPosn {absolute = 327, row = 12, col = 50}))], rtyp = "rectype1", rposn = AlexPosn {absolute = 306, row = 12, col = 29}}, aposn = AlexPosn {absolute = 290, row = 12, col = 13}}, vposn = AlexPosn {absolute = 277, row = 11, col = 31}},VarDecl {vname = "arr3", vescape = True, vtyp = Just "arrtype3", vinit = ArrayExp {atyp = "arrtype3", size = IntExp 100, ainit = StrExp "" (AlexPosn {absolute = 404, row = 13, col = 40}), aposn = AlexPosn {absolute = 385, row = 13, col = 21}}, vposn = AlexPosn {absolute = 364, row = 12, col = 87}},VarDecl {vname = "rec1", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("age",IntExp 44),("id",IntExp 2432),("address",StrExp "Kapou" (AlexPosn {absolute = 459, row = 15, col = 52})),("name",StrExp "Kapoios" (AlexPosn {absolute = 442, row = 15, col = 35}))], rtyp = "rectype1", rposn = AlexPosn {absolute = 419, row = 15, col = 12}}, vposn = AlexPosn {absolute = 407, row = 14, col = 1}},VarDecl {vname = "rec2", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("dates",ArrayExp {atyp = "arrtype1", size = IntExp 3, ainit = IntExp 1900, aposn = AlexPosn {absolute = 523, row = 16, col = 43}}),("name",StrExp "Allos" (AlexPosn {absolute = 513, row = 16, col = 33}))], rtyp = "rectype2", rposn = AlexPosn {absolute = 492, row = 16, col = 12}}, vposn = AlexPosn {absolute = 480, row = 15, col = 73}}], lbody = SeqExp [AssignExp {avar = SubscriptVar (SimpleVar "arr1" (AlexPosn {absolute = 550, row = 19, col = 1})) (IntExp 0) (AlexPosn {absolute = 554, row = 20, col = 4}), aexp = IntExp 1, aPosn = AlexPosn {absolute = 558, row = 20, col = 8}},AssignExp {avar = SubscriptVar (SimpleVar "arr1" (AlexPosn {absolute = 565, row = 20, col = 15})) (IntExp 9) (AlexPosn {absolute = 569, row = 21, col = 4}), aexp = IntExp 3, aPosn = AlexPosn {absolute = 573, row = 21, col = 8}},AssignExp {avar = FieldVar (SubscriptVar (SimpleVar "arr2" (AlexPosn {absolute = 579, row = 21, col = 14})) (IntExp 3) (AlexPosn {absolute = 583, row = 22, col = 4})) "name" (AlexPosn {absolute = 586, row = 22, col = 7}), aexp = StrExp "kati" (AlexPosn {absolute = 600, row = 22, col = 21}), aPosn = AlexPosn {absolute = 592, row = 22, col = 13}},AssignExp {avar = FieldVar (SubscriptVar (SimpleVar "arr2" (AlexPosn {absolute = 603, row = 22, col = 24})) (IntExp 1) (AlexPosn {absolute = 607, row = 23, col = 4})) "age" (AlexPosn {absolute = 610, row = 23, col = 7}), aexp = IntExp 23, aPosn = AlexPosn {absolute = 615, row = 23, col = 12}},AssignExp {avar = SubscriptVar (SimpleVar "arr3" (AlexPosn {absolute = 622, row = 23, col = 19})) (IntExp 34) (AlexPosn {absolute = 626, row = 24, col = 4}), aexp = StrExp "sfd" (AlexPosn {absolute = 638, row = 24, col = 16}), aPosn = AlexPosn {absolute = 631, row = 24, col = 9}},AssignExp {avar = FieldVar (SimpleVar "rec1" (AlexPosn {absolute = 642, row = 25, col = 1})) "name" (AlexPosn {absolute = 646, row = 26, col = 4}), aexp = StrExp "sdf" (AlexPosn {absolute = 659, row = 26, col = 17}), aPosn = AlexPosn {absolute = 652, row = 26, col = 10}},AssignExp {avar = SubscriptVar (FieldVar (SimpleVar "rec2" (AlexPosn {absolute = 662, row = 26, col = 20})) "dates" (AlexPosn {absolute = 666, row = 27, col = 4})) (IntExp 0) (AlexPosn {absolute = 672, row = 27, col = 10}), aexp = IntExp 2323, aPosn = AlexPosn {absolute = 676, row = 27, col = 14}},AssignExp {avar = SubscriptVar (FieldVar (SimpleVar "rec2" (AlexPosn {absolute = 685, row = 27, col = 23})) "dates" (AlexPosn {absolute = 689, row = 28, col = 4})) (IntExp 2) (AlexPosn {absolute = 695, row = 28, col = 10}), aexp = IntExp 2323, aPosn = AlexPosn {absolute = 699, row = 28, col = 14}}], lposn = AlexPosn {absolute = 28, row = 1, col = 28}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel43 =
    testCase "parses test43 (read from file)" $ (readFile "test/appeltestcases/test43.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = SeqExp [], vposn = AlexPosn {absolute = 73, row = 4, col = 1}}], lbody = OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 89, row = 6, col = 1})), oper = Add, right = IntExp 3, opposn = AlexPosn {absolute = 91, row = 6, col = 3}}, lposn = AlexPosn {absolute = 67, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel44 =
    testCase "parses test44 (read from file)" $ (readFile "test/appeltestcases/test44.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 70, row = 4, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 83, row = 4, col = 30}}], tposn = AlexPosn {absolute = 54, row = 4, col = 1}},VarDecl {vname = "b", vescape = True, vtyp = Just "rectype", vinit = NilExp, vposn = AlexPosn {absolute = 92, row = 5, col = 1}}], lbody = AssignExp {avar = SimpleVar "b" (AlexPosn {absolute = 119, row = 9, col = 1}), aexp = NilExp, aPosn = AlexPosn {absolute = 121, row = 9, col = 3}}, lposn = AlexPosn {absolute = 47, row = 1, col = 47}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel45 =
    testCase "parses test45 (read from file)" $ (readFile "test/appeltestcases/test45.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 96, row = 3, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 109, row = 3, col = 30}}], tposn = AlexPosn {absolute = 80, row = 3, col = 1}},VarDecl {vname = "a", vescape = True, vtyp = Nothing, vinit = NilExp, vposn = AlexPosn {absolute = 119, row = 5, col = 1}}], lbody = VarExp (SimpleVar "a" (AlexPosn {absolute = 135, row = 7, col = 1})), lposn = AlexPosn {absolute = 74, row = 1, col = 74}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel46 =
    testCase "parses test46 (read from file)" $ (readFile "test/appeltestcases/test46.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "rectype", ttyp = RecordType [Field {fieldname = "name", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 51, row = 3, col = 17}},Field {fieldname = "id", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 64, row = 3, col = 30}}], tposn = AlexPosn {absolute = 35, row = 3, col = 1}},VarDecl {vname = "b", vescape = True, vtyp = Just "rectype", vinit = NilExp, vposn = AlexPosn {absolute = 73, row = 4, col = 1}}], lbody = SeqExp [OpExp {left = VarExp (SimpleVar "b" (AlexPosn {absolute = 98, row = 6, col = 1})), oper = Equal, right = NilExp, opposn = AlexPosn {absolute = 100, row = 6, col = 3}},OpExp {left = VarExp (SimpleVar "b" (AlexPosn {absolute = 108, row = 7, col = 1})), oper = NotEqual, right = NilExp, opposn = AlexPosn {absolute = 110, row = 7, col = 3}}], lposn = AlexPosn {absolute = 29, row = 1, col = 29}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel47 =
    testCase "parses test47 (read from file)" $ (readFile "test/appeltestcases/test47.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "a", ttyp = NameType "int" (AlexPosn {absolute = 233, row = 6, col = 10}), tposn = AlexPosn {absolute = 224, row = 6, col = 1}},VarDecl {vname = "b", vescape = True, vtyp = Nothing, vinit = IntExp 4, vposn = AlexPosn {absolute = 238, row = 7, col = 1}},TypeDecl {tname = "a", ttyp = NameType "string" (AlexPosn {absolute = 259, row = 8, col = 10}), tposn = AlexPosn {absolute = 250, row = 8, col = 1}}], lbody = IntExp 0, lposn = AlexPosn {absolute = 219, row = 4, col = 22}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppel48 =
    testCase "parses test48 (read from file)" $ (readFile "test/appeltestcases/test48.tig" >>= (assertEqual [] (Program (LetExp {decls = [FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 248, row = 6, col = 12}}], result = (Just "int",AlexPosn {absolute = 254, row = 6, col = 18}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 261, row = 6, col = 25})), funposn = AlexPosn {absolute = 237, row = 6, col = 1}}],TypeDecl {tname = "t", ttyp = NameType "int" (AlexPosn {absolute = 273, row = 7, col = 10}), tposn = AlexPosn {absolute = 264, row = 7, col = 1}},FunDecls [FunDecl {fundeclname = "g", params = [Field {fieldname = "a", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 289, row = 8, col = 12}}], result = (Just "int",AlexPosn {absolute = 295, row = 8, col = 18}), body = VarExp (SimpleVar "a" (AlexPosn {absolute = 302, row = 8, col = 25})), funposn = AlexPosn {absolute = 278, row = 8, col = 1}}]], lbody = IntExp 0, lposn = AlexPosn {absolute = 232, row = 4, col = 22}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testLexAppel49 =
    testCase "lexes test49 (read from file)" $ (readFile "test/appeltestcases/test49.tig" >>= (assertEqual [] ([LET, TYPE, ID "rectype", EQUAL, LBRACE, ID "name", COLON, ID "string", COMMA, ID "id", COLON, ID "int", RBRACE, VAR, ID "a", DEFINE, ID "rectype", NIL, IN, ID "a", END, TEOF])) . alexMonadScanTokens)
-- NOTE: turn this test back on once parser is updated to provide error handling
--testParseAppel49 =
    --testCase "parses test49 (read from file)" $ (readFile "test/appeltestcases/test49.tig" >>= (assertEqual [] (Program $ NilExp)) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppelMerge =
    testCase "parses merge.tig (read from file)" $ (readFile "test/appeltestcases/merge.tig" >>= (assertEqual [] (Program (LetExp {decls = [TypeDecl {tname = "any", ttyp = RecordType [Field {fieldname = "any", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 20, row = 3, col = 13}}], tposn = AlexPosn {absolute = 8, row = 3, col = 1}},VarDecl {vname = "buffer", vescape = True, vtyp = Nothing, vinit = CallExp {func = "getchar", args = [], callposn = AlexPosn {absolute = 53, row = 4, col = 22}}, vposn = AlexPosn {absolute = 32, row = 4, col = 1}},FunDecls [FunDecl {fundeclname = "readint", params = [Field {fieldname = "any", escape = True, typ = "any", fieldposn = AlexPosn {absolute = 74, row = 6, col = 17}}], result = (Just "int",AlexPosn {absolute = 84, row = 6, col = 27}), body = LetExp {decls = [VarDecl {vname = "i", vescape = True, vtyp = Nothing, vinit = IntExp 0, vposn = AlexPosn {absolute = 97, row = 7, col = 5}},FunDecls [FunDecl {fundeclname = "isdigit", params = [Field {fieldname = "s", escape = True, typ = "string", fieldposn = AlexPosn {absolute = 130, row = 8, col = 22}}], result = (Just "int",AlexPosn {absolute = 142, row = 8, col = 34}), body = IfExp {iftest = OpExp {left = CallExp {func = "ord", args = [VarExp (SimpleVar "buffer" (AlexPosn {absolute = 159, row = 9, col = 8}))], callposn = AlexPosn {absolute = 158, row = 9, col = 7}}, oper = GreaterEqual, right = CallExp {func = "ord", args = [StrExp "0" (AlexPosn {absolute = 174, row = 9, col = 23})], callposn = AlexPosn {absolute = 171, row = 9, col = 20}}, opposn = AlexPosn {absolute = 166, row = 9, col = 15}}, thenexp = OpExp {left = CallExp {func = "ord", args = [VarExp (SimpleVar "buffer" (AlexPosn {absolute = 183, row = 9, col = 32}))], callposn = AlexPosn {absolute = 182, row = 9, col = 31}}, oper = LessEqual, right = CallExp {func = "ord", args = [StrExp "9" (AlexPosn {absolute = 198, row = 9, col = 47})], callposn = AlexPosn {absolute = 195, row = 9, col = 44}}, opposn = AlexPosn {absolute = 190, row = 9, col = 39}}, elseexp = Just (IntExp 0), ifposn = AlexPosn {absolute = 177, row = 9, col = 26}}, funposn = AlexPosn {absolute = 113, row = 8, col = 5}},FunDecl {fundeclname = "skipto", params = [], result = (Nothing,AlexPosn {absolute = 224, row = 10, col = 23}), body = WhileExp {wtest = IfExp {iftest = OpExp {left = VarExp (SimpleVar "buffer" (AlexPosn {absolute = 239, row = 11, col = 13})), oper = Equal, right = StrExp " " (AlexPosn {absolute = 248, row = 11, col = 22}), opposn = AlexPosn {absolute = 245, row = 11, col = 19}}, thenexp = IntExp 1, elseexp = Just (OpExp {left = VarExp (SimpleVar "buffer" (AlexPosn {absolute = 252, row = 11, col = 26})), oper = Equal, right = StrExp "\n" (AlexPosn {absolute = 262, row = 11, col = 36}), opposn = AlexPosn {absolute = 258, row = 11, col = 32}}), ifposn = AlexPosn {absolute = 250, row = 11, col = 24}}, wbody = AssignExp {avar = SimpleVar "buffer" (AlexPosn {absolute = 276, row = 12, col = 12}), aexp = CallExp {func = "getchar", args = [], callposn = AlexPosn {absolute = 293, row = 12, col = 29}}, aPosn = AlexPosn {absolute = 283, row = 12, col = 19}}, wPosn = AlexPosn {absolute = 233, row = 11, col = 7}}, funposn = AlexPosn {absolute = 206, row = 10, col = 5}}]], lbody = SeqExp [CallExp {func = "skipto", args = [], callposn = AlexPosn {absolute = 307, row = 13, col = 11}},AssignExp {avar = FieldVar (SimpleVar "any" (AlexPosn {absolute = 316, row = 14, col = 5})) "any" (AlexPosn {absolute = 319, row = 14, col = 8}), aexp = CallExp {func = "isdigit", args = [VarExp (SimpleVar "buffer" (AlexPosn {absolute = 335, row = 14, col = 24}))], callposn = AlexPosn {absolute = 334, row = 14, col = 23}}, aPosn = AlexPosn {absolute = 324, row = 14, col = 13}},WhileExp {wtest = CallExp {func = "isdigit", args = [VarExp (SimpleVar "buffer" (AlexPosn {absolute = 363, row = 15, col = 19}))], callposn = AlexPosn {absolute = 362, row = 15, col = 18}}, wbody = SeqExp [AssignExp {avar = SimpleVar "i" (AlexPosn {absolute = 382, row = 16, col = 11}), aexp = OpExp {left = OpExp {left = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 387, row = 16, col = 16})), oper = Mul, right = IntExp 10, opposn = AlexPosn {absolute = 388, row = 16, col = 17}}, oper = Add, right = CallExp {func = "ord", args = [VarExp (SimpleVar "buffer" (AlexPosn {absolute = 396, row = 16, col = 25}))], callposn = AlexPosn {absolute = 395, row = 16, col = 24}}, opposn = AlexPosn {absolute = 391, row = 16, col = 20}}, oper = Sub, right = CallExp {func = "ord", args = [StrExp "0" (AlexPosn {absolute = 410, row = 16, col = 39})], callposn = AlexPosn {absolute = 407, row = 16, col = 36}}, opposn = AlexPosn {absolute = 403, row = 16, col = 32}}, aPosn = AlexPosn {absolute = 384, row = 16, col = 13}},AssignExp {avar = SimpleVar "buffer" (AlexPosn {absolute = 414, row = 16, col = 43}), aexp = CallExp {func = "getchar", args = [], callposn = AlexPosn {absolute = 431, row = 16, col = 60}}, aPosn = AlexPosn {absolute = 421, row = 16, col = 50}}], wPosn = AlexPosn {absolute = 349, row = 15, col = 5}},VarExp (SimpleVar "i" (AlexPosn {absolute = 441, row = 17, col = 5}))], lposn = AlexPosn {absolute = 93, row = 7, col = 1}}, funposn = AlexPosn {absolute = 57, row = 5, col = 1}}],TypeDecl {tname = "list", ttyp = RecordType [Field {fieldname = "first", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 463, row = 20, col = 14}},Field {fieldname = "rest", escape = True, typ = "list", fieldposn = AlexPosn {absolute = 475, row = 20, col = 26}}], tposn = AlexPosn {absolute = 450, row = 20, col = 1}},FunDecls [FunDecl {fundeclname = "readlist", params = [], result = (Just "list",AlexPosn {absolute = 509, row = 22, col = 21}), body = LetExp {decls = [VarDecl {vname = "any", vescape = True, vtyp = Nothing, vinit = RecordExp {fields = [("any",IntExp 0)], rtyp = "any", rposn = AlexPosn {absolute = 537, row = 23, col = 19}}, vposn = AlexPosn {absolute = 526, row = 23, col = 8}},VarDecl {vname = "i", vescape = True, vtyp = Nothing, vinit = CallExp {func = "readint", args = [VarExp (SimpleVar "any" (AlexPosn {absolute = 573, row = 24, col = 25}))], callposn = AlexPosn {absolute = 572, row = 24, col = 24}}, vposn = AlexPosn {absolute = 556, row = 24, col = 8}}], lbody = IfExp {iftest = VarExp (FieldVar (SimpleVar "any" (AlexPosn {absolute = 589, row = 25, col = 11})) "any" (AlexPosn {absolute = 592, row = 25, col = 14})), thenexp = RecordExp {fields = [("rest",CallExp {func = "readlist", args = [], callposn = AlexPosn {absolute = 637, row = 26, col = 40}}),("first",VarExp (SimpleVar "i" (AlexPosn {absolute = 622, row = 26, col = 25})))], rtyp = "list", rposn = AlexPosn {absolute = 611, row = 26, col = 14}}, elseexp = Just NilExp, ifposn = AlexPosn {absolute = 586, row = 25, col = 8}}, lposn = AlexPosn {absolute = 522, row = 23, col = 4}}, funposn = AlexPosn {absolute = 489, row = 22, col = 1}},FunDecl {fundeclname = "merge", params = [Field {fieldname = "a", escape = True, typ = "list", fieldposn = AlexPosn {absolute = 684, row = 30, col = 16}},Field {fieldname = "b", escape = True, typ = "list", fieldposn = AlexPosn {absolute = 693, row = 30, col = 25}}], result = (Just "list",AlexPosn {absolute = 702, row = 30, col = 34}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "a" (AlexPosn {absolute = 717, row = 31, col = 6})), oper = Equal, right = NilExp, opposn = AlexPosn {absolute = 718, row = 31, col = 7}}, thenexp = VarExp (SimpleVar "b" (AlexPosn {absolute = 728, row = 31, col = 17})), elseexp = Just (IfExp {iftest = OpExp {left = VarExp (SimpleVar "b" (AlexPosn {absolute = 741, row = 32, col = 11})), oper = Equal, right = NilExp, opposn = AlexPosn {absolute = 742, row = 32, col = 12}}, thenexp = VarExp (SimpleVar "a" (AlexPosn {absolute = 752, row = 32, col = 22})), elseexp = Just (IfExp {iftest = OpExp {left = VarExp (FieldVar (SimpleVar "a" (AlexPosn {absolute = 765, row = 33, col = 11})) "first" (AlexPosn {absolute = 766, row = 33, col = 12})), oper = LessThan, right = VarExp (FieldVar (SimpleVar "b" (AlexPosn {absolute = 775, row = 33, col = 21})) "first" (AlexPosn {absolute = 776, row = 33, col = 22})), opposn = AlexPosn {absolute = 773, row = 33, col = 19}}, thenexp = RecordExp {fields = [("rest",CallExp {func = "merge", args = [VarExp (FieldVar (SimpleVar "a" (AlexPosn {absolute = 825, row = 34, col = 41})) "rest" (AlexPosn {absolute = 826, row = 34, col = 42})),VarExp (SimpleVar "b" (AlexPosn {absolute = 832, row = 34, col = 48}))], callposn = AlexPosn {absolute = 824, row = 34, col = 40}}),("first",VarExp (FieldVar (SimpleVar "a" (AlexPosn {absolute = 806, row = 34, col = 22})) "first" (AlexPosn {absolute = 807, row = 34, col = 23})))], rtyp = "list", rposn = AlexPosn {absolute = 795, row = 34, col = 11}}, elseexp = Just (RecordExp {fields = [("rest",CallExp {func = "merge", args = [VarExp (SimpleVar "a" (AlexPosn {absolute = 877, row = 35, col = 41})),VarExp (FieldVar (SimpleVar "b" (AlexPosn {absolute = 879, row = 35, col = 43})) "rest" (AlexPosn {absolute = 880, row = 35, col = 44}))], callposn = AlexPosn {absolute = 876, row = 35, col = 40}}),("first",VarExp (FieldVar (SimpleVar "b" (AlexPosn {absolute = 858, row = 35, col = 22})) "first" (AlexPosn {absolute = 859, row = 35, col = 23})))], rtyp = "list", rposn = AlexPosn {absolute = 847, row = 35, col = 11}}), ifposn = AlexPosn {absolute = 762, row = 33, col = 8}}), ifposn = AlexPosn {absolute = 738, row = 32, col = 8}}), ifposn = AlexPosn {absolute = 714, row = 31, col = 3}}, funposn = AlexPosn {absolute = 669, row = 30, col = 1}},FunDecl {fundeclname = "printint", params = [Field {fieldname = "i", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 908, row = 37, col = 19}}], result = (Nothing,AlexPosn {absolute = 916, row = 37, col = 27}), body = LetExp {decls = [FunDecls [FunDecl {fundeclname = "f", params = [Field {fieldname = "i", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 935, row = 38, col = 17}}], result = (Nothing,AlexPosn {absolute = 942, row = 38, col = 24}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 947, row = 38, col = 29})), oper = GreaterThan, right = IntExp 0, opposn = AlexPosn {absolute = 948, row = 38, col = 30}}, thenexp = SeqExp [CallExp {func = "f", args = [OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 966, row = 39, col = 14})), oper = Div, right = IntExp 10, opposn = AlexPosn {absolute = 967, row = 39, col = 15}}], callposn = AlexPosn {absolute = 965, row = 39, col = 13}},CallExp {func = "print", args = [CallExp {func = "chr", args = [OpExp {left = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 983, row = 39, col = 31})), oper = Sub, right = OpExp {left = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 985, row = 39, col = 33})), oper = Div, right = IntExp 10, opposn = AlexPosn {absolute = 986, row = 39, col = 34}}, oper = Mul, right = IntExp 10, opposn = AlexPosn {absolute = 989, row = 39, col = 37}}, opposn = AlexPosn {absolute = 984, row = 39, col = 32}}, oper = Add, right = CallExp {func = "ord", args = [StrExp "0" (AlexPosn {absolute = 999, row = 39, col = 47})], callposn = AlexPosn {absolute = 996, row = 39, col = 44}}, opposn = AlexPosn {absolute = 992, row = 39, col = 40}}], callposn = AlexPosn {absolute = 982, row = 39, col = 30}}], callposn = AlexPosn {absolute = 978, row = 39, col = 26}}], elseexp = Nothing, ifposn = AlexPosn {absolute = 944, row = 38, col = 26}}, funposn = AlexPosn {absolute = 924, row = 38, col = 6}}]], lbody = IfExp {iftest = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 1014, row = 40, col = 9})), oper = LessThan, right = IntExp 0, opposn = AlexPosn {absolute = 1015, row = 40, col = 10}}, thenexp = SeqExp [CallExp {func = "print", args = [StrExp "-" (AlexPosn {absolute = 1032, row = 40, col = 27})], callposn = AlexPosn {absolute = 1029, row = 40, col = 24}},CallExp {func = "f", args = [OpExp {left = IntExp 0, oper = Sub, right = VarExp (SimpleVar "i" (AlexPosn {absolute = 1039, row = 40, col = 34})), opposn = AlexPosn {absolute = 1038, row = 40, col = 33}}], callposn = AlexPosn {absolute = 1037, row = 40, col = 32}}], elseexp = Just (IfExp {iftest = OpExp {left = VarExp (SimpleVar "i" (AlexPosn {absolute = 1057, row = 41, col = 14})), oper = GreaterThan, right = IntExp 0, opposn = AlexPosn {absolute = 1058, row = 41, col = 15}}, thenexp = CallExp {func = "f", args = [VarExp (SimpleVar "i" (AlexPosn {absolute = 1068, row = 41, col = 25}))], callposn = AlexPosn {absolute = 1067, row = 41, col = 24}}, elseexp = Just (CallExp {func = "print", args = [StrExp "0" (AlexPosn {absolute = 1090, row = 42, col = 19})], callposn = AlexPosn {absolute = 1087, row = 42, col = 16}}), ifposn = AlexPosn {absolute = 1054, row = 41, col = 11}}), ifposn = AlexPosn {absolute = 1011, row = 40, col = 6}}, lposn = AlexPosn {absolute = 920, row = 38, col = 2}}, funposn = AlexPosn {absolute = 890, row = 37, col = 1}},FunDecl {fundeclname = "printlist", params = [Field {fieldname = "l", escape = True, typ = "list", fieldposn = AlexPosn {absolute = 1120, row = 45, col = 20}}], result = (Nothing,AlexPosn {absolute = 1129, row = 45, col = 29}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "l" (AlexPosn {absolute = 1137, row = 46, col = 6})), oper = Equal, right = NilExp, opposn = AlexPosn {absolute = 1138, row = 46, col = 7}}, thenexp = CallExp {func = "print", args = [StrExp "\n" (AlexPosn {absolute = 1157, row = 46, col = 26})], callposn = AlexPosn {absolute = 1153, row = 46, col = 22}}, elseexp = Just (SeqExp [CallExp {func = "printint", args = [VarExp (FieldVar (SimpleVar "l" (AlexPosn {absolute = 1178, row = 47, col = 18})) "first" (AlexPosn {absolute = 1179, row = 47, col = 19}))], callposn = AlexPosn {absolute = 1177, row = 47, col = 17}},CallExp {func = "print", args = [StrExp " " (AlexPosn {absolute = 1196, row = 47, col = 36})], callposn = AlexPosn {absolute = 1193, row = 47, col = 33}},CallExp {func = "printlist", args = [VarExp (FieldVar (SimpleVar "l" (AlexPosn {absolute = 1210, row = 47, col = 50})) "rest" (AlexPosn {absolute = 1211, row = 47, col = 51}))], callposn = AlexPosn {absolute = 1209, row = 47, col = 49}}]), ifposn = AlexPosn {absolute = 1134, row = 46, col = 3}}, funposn = AlexPosn {absolute = 1101, row = 45, col = 1}}],VarDecl {vname = "list1", vescape = True, vtyp = Nothing, vinit = CallExp {func = "readlist", args = [], callposn = AlexPosn {absolute = 1244, row = 49, col = 24}}, vposn = AlexPosn {absolute = 1223, row = 49, col = 3}},VarDecl {vname = "list2", vescape = True, vtyp = Nothing, vinit = SeqExp [AssignExp {avar = SimpleVar "buffer" (AlexPosn {absolute = 1264, row = 50, col = 17}), aexp = CallExp {func = "getchar", args = [], callposn = AlexPosn {absolute = 1279, row = 50, col = 32}}, aPosn = AlexPosn {absolute = 1270, row = 50, col = 23}},CallExp {func = "readlist", args = [], callposn = AlexPosn {absolute = 1291, row = 50, col = 44}}], vposn = AlexPosn {absolute = 1250, row = 50, col = 3}}], lbody = CallExp {func = "printlist", args = [CallExp {func = "merge", args = [VarExp (SimpleVar "list1" (AlexPosn {absolute = 1346, row = 54, col = 20})),VarExp (SimpleVar "list2" (AlexPosn {absolute = 1352, row = 54, col = 26}))], callposn = AlexPosn {absolute = 1345, row = 54, col = 19}}], callposn = AlexPosn {absolute = 1339, row = 54, col = 13}}, lposn = AlexPosn {absolute = 1, row = 1, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
testParseAppelQueens =
    testCase "parses queens.tig (read from file)" $ (readFile "test/appeltestcases/queens.tig" >>= (assertEqual [] (Program (LetExp {decls = [VarDecl {vname = "N", vescape = True, vtyp = Nothing, vinit = IntExp 8, vposn = AlexPosn {absolute = 56, row = 4, col = 4}},TypeDecl {tname = "intArray", ttyp = ArrayType "int" (AlexPosn {absolute = 88, row = 6, col = 20}), tposn = AlexPosn {absolute = 72, row = 6, col = 4}},VarDecl {vname = "row", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "intArray", size = VarExp (SimpleVar "N" (AlexPosn {absolute = 128, row = 8, col = 26})), ainit = IntExp 0, aposn = AlexPosn {absolute = 117, row = 8, col = 15}}, vposn = AlexPosn {absolute = 106, row = 8, col = 4}},VarDecl {vname = "col", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "intArray", size = VarExp (SimpleVar "N" (AlexPosn {absolute = 163, row = 9, col = 26})), ainit = IntExp 0, aposn = AlexPosn {absolute = 152, row = 9, col = 15}}, vposn = AlexPosn {absolute = 141, row = 9, col = 4}},VarDecl {vname = "diag1", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "intArray", size = OpExp {left = OpExp {left = VarExp (SimpleVar "N" (AlexPosn {absolute = 199, row = 10, col = 27})), oper = Add, right = VarExp (SimpleVar "N" (AlexPosn {absolute = 201, row = 10, col = 29})), opposn = AlexPosn {absolute = 200, row = 10, col = 28}}, oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 202, row = 10, col = 30}}, ainit = IntExp 0, aposn = AlexPosn {absolute = 189, row = 10, col = 17}}, vposn = AlexPosn {absolute = 176, row = 10, col = 4}},VarDecl {vname = "diag2", vescape = True, vtyp = Nothing, vinit = ArrayExp {atyp = "intArray", size = OpExp {left = OpExp {left = VarExp (SimpleVar "N" (AlexPosn {absolute = 238, row = 11, col = 27})), oper = Add, right = VarExp (SimpleVar "N" (AlexPosn {absolute = 240, row = 11, col = 29})), opposn = AlexPosn {absolute = 239, row = 11, col = 28}}, oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 241, row = 11, col = 30}}, ainit = IntExp 0, aposn = AlexPosn {absolute = 228, row = 11, col = 17}}, vposn = AlexPosn {absolute = 215, row = 11, col = 4}},FunDecls [FunDecl {fundeclname = "printboard", params = [], result = (Nothing,AlexPosn {absolute = 277, row = 13, col = 26}), body = SeqExp [ForExp {fvar = "i", fescape = True, lo = IntExp 0, hi = OpExp {left = VarExp (SimpleVar "N" (AlexPosn {absolute = 301, row = 14, col = 22})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 302, row = 14, col = 23}}, fbody = SeqExp [ForExp {fvar = "j", fescape = True, lo = IntExp 0, hi = OpExp {left = VarExp (SimpleVar "N" (AlexPosn {absolute = 325, row = 15, col = 20})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 326, row = 15, col = 21}}, fbody = CallExp {func = "print", args = [IfExp {iftest = OpExp {left = VarExp (SubscriptVar (SimpleVar "col" (AlexPosn {absolute = 349, row = 16, col = 19})) (VarExp (SimpleVar "i" (AlexPosn {absolute = 353, row = 16, col = 23}))) (AlexPosn {absolute = 352, row = 16, col = 22})), oper = Equal, right = VarExp (SimpleVar "j" (AlexPosn {absolute = 356, row = 16, col = 26})), opposn = AlexPosn {absolute = 355, row = 16, col = 25}}, thenexp = StrExp " O" (AlexPosn {absolute = 366, row = 16, col = 36}), elseexp = Just (StrExp " ." (AlexPosn {absolute = 376, row = 16, col = 46})), ifposn = AlexPosn {absolute = 346, row = 16, col = 16}}], callposn = AlexPosn {absolute = 345, row = 16, col = 15}}, fposn = AlexPosn {absolute = 311, row = 15, col = 6}},CallExp {func = "print", args = [StrExp "\n" (AlexPosn {absolute = 395, row = 17, col = 15})], callposn = AlexPosn {absolute = 391, row = 17, col = 11}}], fposn = AlexPosn {absolute = 287, row = 14, col = 8}},CallExp {func = "print", args = [StrExp "\n" (AlexPosn {absolute = 418, row = 18, col = 18})], callposn = AlexPosn {absolute = 414, row = 18, col = 14}}], funposn = AlexPosn {absolute = 255, row = 13, col = 4}},FunDecl {fundeclname = "try", params = [Field {fieldname = "c", escape = True, typ = "int", fieldposn = AlexPosn {absolute = 440, row = 20, col = 17}}], result = (Nothing,AlexPosn {absolute = 447, row = 20, col = 24}), body = IfExp {iftest = OpExp {left = VarExp (SimpleVar "c" (AlexPosn {absolute = 518, row = 22, col = 8})), oper = Equal, right = VarExp (SimpleVar "N" (AlexPosn {absolute = 520, row = 22, col = 10})), opposn = AlexPosn {absolute = 519, row = 22, col = 9}}, thenexp = CallExp {func = "printboard", args = [], callposn = AlexPosn {absolute = 542, row = 23, col = 20}}, elseexp = Just (ForExp {fvar = "r", fescape = True, lo = IntExp 0, hi = OpExp {left = VarExp (SimpleVar "N" (AlexPosn {absolute = 569, row = 24, col = 24})), oper = Sub, right = IntExp 1, opposn = AlexPosn {absolute = 570, row = 24, col = 25}}, fbody = IfExp {iftest = IfExp {iftest = IfExp {iftest = OpExp {left = VarExp (SubscriptVar (SimpleVar "row" (AlexPosn {absolute = 583, row = 25, col = 10})) (VarExp (SimpleVar "r" (AlexPosn {absolute = 587, row = 25, col = 14}))) (AlexPosn {absolute = 586, row = 25, col = 13})), oper = Equal, right = IntExp 0, opposn = AlexPosn {absolute = 589, row = 25, col = 16}}, thenexp = OpExp {left = VarExp (SubscriptVar (SimpleVar "diag1" (AlexPosn {absolute = 594, row = 25, col = 21})) (OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 600, row = 25, col = 27})), oper = Add, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 602, row = 25, col = 29})), opposn = AlexPosn {absolute = 601, row = 25, col = 28}}) (AlexPosn {absolute = 599, row = 25, col = 26})), oper = Equal, right = IntExp 0, opposn = AlexPosn {absolute = 604, row = 25, col = 31}}, elseexp = Just (IntExp 0), ifposn = AlexPosn {absolute = 592, row = 25, col = 19}}, thenexp = OpExp {left = VarExp (SubscriptVar (SimpleVar "diag2" (AlexPosn {absolute = 609, row = 25, col = 36})) (OpExp {left = OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 615, row = 25, col = 42})), oper = Add, right = IntExp 7, opposn = AlexPosn {absolute = 616, row = 25, col = 43}}, oper = Sub, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 619, row = 25, col = 46})), opposn = AlexPosn {absolute = 618, row = 25, col = 45}}) (AlexPosn {absolute = 614, row = 25, col = 41})), oper = Equal, right = IntExp 0, opposn = AlexPosn {absolute = 621, row = 25, col = 48}}, elseexp = Just (IntExp 0), ifposn = AlexPosn {absolute = 607, row = 25, col = 34}}, thenexp = SeqExp [AssignExp {avar = SubscriptVar (SimpleVar "row" (AlexPosn {absolute = 642, row = 26, col = 18})) (VarExp (SimpleVar "r" (AlexPosn {absolute = 646, row = 26, col = 22}))) (AlexPosn {absolute = 645, row = 26, col = 21}), aexp = IntExp 1, aPosn = AlexPosn {absolute = 648, row = 26, col = 24}},AssignExp {avar = SubscriptVar (SimpleVar "diag1" (AlexPosn {absolute = 653, row = 26, col = 29})) (OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 659, row = 26, col = 35})), oper = Add, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 661, row = 26, col = 37})), opposn = AlexPosn {absolute = 660, row = 26, col = 36}}) (AlexPosn {absolute = 658, row = 26, col = 34}), aexp = IntExp 1, aPosn = AlexPosn {absolute = 663, row = 26, col = 39}},AssignExp {avar = SubscriptVar (SimpleVar "diag2" (AlexPosn {absolute = 668, row = 26, col = 44})) (OpExp {left = OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 674, row = 26, col = 50})), oper = Add, right = IntExp 7, opposn = AlexPosn {absolute = 675, row = 26, col = 51}}, oper = Sub, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 678, row = 26, col = 54})), opposn = AlexPosn {absolute = 677, row = 26, col = 53}}) (AlexPosn {absolute = 673, row = 26, col = 49}), aexp = IntExp 1, aPosn = AlexPosn {absolute = 680, row = 26, col = 56}},AssignExp {avar = SubscriptVar (SimpleVar "col" (AlexPosn {absolute = 696, row = 27, col = 11})) (VarExp (SimpleVar "c" (AlexPosn {absolute = 700, row = 27, col = 15}))) (AlexPosn {absolute = 699, row = 27, col = 14}), aexp = VarExp (SimpleVar "r" (AlexPosn {absolute = 704, row = 27, col = 19})), aPosn = AlexPosn {absolute = 702, row = 27, col = 17}},CallExp {func = "try", args = [OpExp {left = VarExp (SimpleVar "c" (AlexPosn {absolute = 729, row = 28, col = 22})), oper = Add, right = IntExp 1, opposn = AlexPosn {absolute = 730, row = 28, col = 23}}], callposn = AlexPosn {absolute = 728, row = 28, col = 21}},AssignExp {avar = SubscriptVar (SimpleVar "row" (AlexPosn {absolute = 739, row = 29, col = 4})) (VarExp (SimpleVar "r" (AlexPosn {absolute = 743, row = 29, col = 8}))) (AlexPosn {absolute = 742, row = 29, col = 7}), aexp = IntExp 0, aPosn = AlexPosn {absolute = 745, row = 29, col = 10}},AssignExp {avar = SubscriptVar (SimpleVar "diag1" (AlexPosn {absolute = 750, row = 29, col = 15})) (OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 756, row = 29, col = 21})), oper = Add, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 758, row = 29, col = 23})), opposn = AlexPosn {absolute = 757, row = 29, col = 22}}) (AlexPosn {absolute = 755, row = 29, col = 20}), aexp = IntExp 0, aPosn = AlexPosn {absolute = 760, row = 29, col = 25}},AssignExp {avar = SubscriptVar (SimpleVar "diag2" (AlexPosn {absolute = 765, row = 29, col = 30})) (OpExp {left = OpExp {left = VarExp (SimpleVar "r" (AlexPosn {absolute = 771, row = 29, col = 36})), oper = Add, right = IntExp 7, opposn = AlexPosn {absolute = 772, row = 29, col = 37}}, oper = Sub, right = VarExp (SimpleVar "c" (AlexPosn {absolute = 775, row = 29, col = 40})), opposn = AlexPosn {absolute = 774, row = 29, col = 39}}) (AlexPosn {absolute = 770, row = 29, col = 35}), aexp = IntExp 0, aPosn = AlexPosn {absolute = 777, row = 29, col = 42}}], elseexp = Nothing, ifposn = AlexPosn {absolute = 580, row = 25, col = 7}}, fposn = AlexPosn {absolute = 555, row = 24, col = 10}}), ifposn = AlexPosn {absolute = 515, row = 22, col = 5}}, funposn = AlexPosn {absolute = 427, row = 20, col = 4}}]], lbody = CallExp {func = "try", args = [IntExp 0], callposn = AlexPosn {absolute = 792, row = 32, col = 7}}, lposn = AlexPosn {absolute = 48, row = 2, col = 1}}))) . happyTokenParseWithPosn . alexMonadScanTokensWithPosn)
    

    
